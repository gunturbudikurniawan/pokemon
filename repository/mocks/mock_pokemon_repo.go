// Code generated by MockGen. DO NOT EDIT.
// Source: pokemon_battle/repository (interfaces: PokemonRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "pokemon/models"
	reflect "reflect"
)

// MockPokemonRepo is a mock of PokemonRepo interface
type MockPokemonRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPokemonRepoMockRecorder
}

// MockPokemonRepoMockRecorder is the mock recorder for MockPokemonRepo
type MockPokemonRepoMockRecorder struct {
	mock *MockPokemonRepo
}

// NewMockPokemonRepo creates a new mock instance
func NewMockPokemonRepo(ctrl *gomock.Controller) *MockPokemonRepo {
	mock := &MockPokemonRepo{ctrl: ctrl}
	mock.recorder = &MockPokemonRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPokemonRepo) EXPECT() *MockPokemonRepoMockRecorder {
	return m.recorder
}

// GetAllPokemons mocks base method
func (m *MockPokemonRepo) GetAllPokemons() (models.AllPokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPokemons")
	ret0, _ := ret[0].(models.AllPokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPokemons indicates an expected call of GetAllPokemons
func (mr *MockPokemonRepoMockRecorder) GetAllPokemons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPokemons", reflect.TypeOf((*MockPokemonRepo)(nil).GetAllPokemons))
}

// GetBattle mocks base method
func (m *MockPokemonRepo) GetBattle(arg0, arg1 string) ([]models.BattleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBattle", arg0, arg1)
	ret0, _ := ret[0].([]models.BattleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBattle indicates an expected call of GetBattle
func (mr *MockPokemonRepoMockRecorder) GetBattle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBattle", reflect.TypeOf((*MockPokemonRepo)(nil).GetBattle), arg0, arg1)
}

// GetPlayer mocks base method
func (m *MockPokemonRepo) GetPlayer(arg0 int) ([]models.DetailPlayers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", arg0)
	ret0, _ := ret[0].([]models.DetailPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer
func (mr *MockPokemonRepoMockRecorder) GetPlayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPokemonRepo)(nil).GetPlayer), arg0)
}

// GetPokemonByName mocks base method
func (m *MockPokemonRepo) GetPokemonByName(arg0 string) (models.GetPokemon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonByName", arg0)
	ret0, _ := ret[0].(models.GetPokemon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonByName indicates an expected call of GetPokemonByName
func (mr *MockPokemonRepoMockRecorder) GetPokemonByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonByName", reflect.TypeOf((*MockPokemonRepo)(nil).GetPokemonByName), arg0)
}

// GetPokemonScore mocks base method
func (m *MockPokemonRepo) GetPokemonScore() ([]models.DetailPlayers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonScore")
	ret0, _ := ret[0].([]models.DetailPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonScore indicates an expected call of GetPokemonScore
func (mr *MockPokemonRepoMockRecorder) GetPokemonScore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonScore", reflect.TypeOf((*MockPokemonRepo)(nil).GetPokemonScore))
}

// PostBattlePokemon mocks base method
func (m *MockPokemonRepo) PostBattlePokemon(arg0 models.BattleInput) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBattlePokemon", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBattlePokemon indicates an expected call of PostBattlePokemon
func (mr *MockPokemonRepoMockRecorder) PostBattlePokemon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBattlePokemon", reflect.TypeOf((*MockPokemonRepo)(nil).PostBattlePokemon), arg0)
}

// PostPokemonData mocks base method
func (m *MockPokemonRepo) PostPokemonData(arg0 models.Pokemon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostPokemonData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostPokemonData indicates an expected call of PostPokemonData
func (mr *MockPokemonRepoMockRecorder) PostPokemonData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostPokemonData", reflect.TypeOf((*MockPokemonRepo)(nil).PostPokemonData), arg0)
}
